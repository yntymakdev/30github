import { NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server";
import { db } from "@/lib/db";

export async function DELETE(
    req: Request,
    context: { params?: { courseId?: string; attachmentId?: string } } // ‚úÖ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ `?`
) {
    try {
        const params = context.params; // ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º `params`

        console.log("üìå params:", params);

        if (!params?.courseId || !params?.attachmentId) {
            return NextResponse.json({ error: "Invalid parameters" }, { status: 400 });
        }

        // –ü–æ–ª—É—á–∞–µ–º userId
        const { userId } =await auth();
        if (!userId) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫—É—Ä—Å–∞
        const courseOwner = await db.course.findUnique({
            where: { id: params.courseId, userId },
        });
        if (!courseOwner) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        const attachmentExists = await db.attachment.findUnique({
            where: { id: params.attachmentId },
        });
        if (!attachmentExists) {
            return NextResponse.json({ error: "Attachment not found" }, { status: 404 });
        }

        // –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        const attachment = await db.attachment.delete({
            where: { id: params.attachmentId },
        });

        return NextResponse.json({ message: "Attachment deleted", attachment });
    } catch (error) {
        console.error("‚ùå ATTACHMENT_ID ERROR:", error);
        return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
    }
}
